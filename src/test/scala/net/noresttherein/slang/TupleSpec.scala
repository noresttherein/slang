package net.noresttherein.slang

import net.noresttherein.slang.tuples.{Nat, Tuple}
import org.scalacheck.Prop._
import org.scalacheck.{Prop, Properties}
import net.noresttherein.slang.tuples.Tuple.{*:, <*>}

/** The purpose of this test is mostly to verify that implicits work correctly, rather than testing simple accessors.
  * @author Marcin Mo≈õcicki marcin@moscicki.net
  */
object TupleSpec extends Properties("Tuple") {
	val t0 = <*>
	val t1 = 0 *: t0
	val t2 = 1 *: t1
	val t3 = 2 *: t2
	val t4 = 3 *: t3
	val t5 = 4 *: t4
	val t6 = 5 *: t5
	val t7 = 6 *: t6
	val t8 = 7 *: t7
	val t9 = 8 *: t8
	val t10 = 9 *: t9
	val t11 = 10 *: t10
	val t12 = 11 *: t11
	val t13 = 12 *: t12
	val t14 = 13 *: t13
	val t15 = 14 *: t14
	val t16 = 15 *: t15
	val t17 = 16 *: t16
	val t18 = 17 *: t17
	val t19 = 18 *: t18
	val t20 = 19 *: t19
	val t21 = 20 *: t20
	val t22 = 21 *: t21
	val t23 = 22 *: t22
	val t24 = 23 *: t23
	val t25 = 24 *: t24
	val elements = 0 to 24

	val tuptup = 1 *: "2" *: 3L *: '4' *: <*>
	
	class Count(var i :Int) {
		def ++ :this.type = { i += 1; this }
		def -- :this.type = { i -= 1; this }
	}

	implicit def countToInt(i :Count) :Int = i.i



	property("apply") = {
		val T = Tuple
		T() =? t0 && T(0) =? t1 && T(1, 0) =? t2 && T(2, 1, 0) =? t3 && T(3, 2, 1, 0) =? t4 && T(4, 3, 2, 1, 0) =? t5 &&
		T(5, 4, 3, 2, 1, 0) =? t6 && T(6, 5, 4, 3, 2, 1, 0) =? t7 && T(7, 6, 5, 4, 3, 2, 1, 0) =? t8 &&
		T(8, 7, 6, 5, 4, 3, 2, 1, 0) =? t9 && T(9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t10 && T(10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t11 &&
		T(11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t12 && T(12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t13 &&
		T(13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t14 && T(14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t15 &&
		T(15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t16 &&
		T(16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t17 &&
		T(17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t18 &&
		T(18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t19 &&
		T(19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t20 &&
		T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t21 &&
		T(21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) =? t22
	}




	property("*:.apply(Int)") = {
		val i = new Count(25); val t = t25
		t(0) =? i.-- && t(1) =? i.-- && t(2) =? i.-- && t(3) =? i.-- && t(4) =? i.-- && t(5) =? i.-- && t(6) =? i.-- &&
		t(7) =? i.-- && t(8) =? i.-- && t(9) =? i.-- && t(10) =? i.-- && t(11) =? i.-- && t(12) =? i.-- && t(13) =? i.-- &&
		t(14) =? i.-- && t(15) =? i.-- && t(16) =? i.-- && t(17) =? i.-- && t(18) =? i.-- && t(19) =? i.-- && t(20) =? i.-- &&
		t(21) =? i.-- && t(22) =? i.-- && t(23) =? i.-- && t(24) =? i.-- &&
		throws(classOf[IndexOutOfBoundsException]){ t(-1) } && throws(classOf[IndexOutOfBoundsException]){ t(25) } &&
		tuptup(0) =? 1 && tuptup(1) =? "2" && tuptup(2) =? 3L && tuptup(3) =? '4'
	}

	property("*:.apply(Nat)") = {
		import Nat._
		import Nat.{++ => inc}
		val i = new Count(25); val t = t25
		t(_0) =? i.-- && t(_1) =? i.-- && t(_2) =? i.-- && t(_3) =? i.-- && t(_4) =? i.-- && t(_5) =? i.-- && t(_6) =? i.-- &&
		t(_7) =? i.-- && t(_8) =? i.-- && t(_9) =? i.-- && t(_10) =? i.-- && t(_11) =? i.-- && t(_12) =? i.-- && t(_13) =? i.-- &&
		t(_14) =? i.-- && t(_15) =? i.-- && t(_16) =? i.-- && t(_17) =? i.-- && t(_18) =? i.-- && t(_19) =? i.-- && t(_20) =? i.-- &&
		t(_21) =? i.-- && t(_22) =? i.-- && t(inc[_22]) =? i.-- && t(inc[inc[_22]]) =? i.-- &&
		tuptup(_0) =? 1 && tuptup(_1)  =? "2" && tuptup(_2) =? 3L && tuptup(_3) =? '4'
	}

	property("*:.updated") = {
		import Nat._
		(tuptup.updated(_0, _10) ?= _10 *: "2" *: 3L *: '4') && (tuptup.updated(_1, _10) ?= 1 *: _10 *: 3L *: '4') &&
			(tuptup.updated(_2, _10) ?= 1 *: "2" *: _10 *: '4') && (tuptup.updated(_3, _10) ?= 1 *: "2" *: 3L *: _10)

	}


	property("*:._0") = {
		val i = new Count(-1)
		t1._0 =? i.++ && t2._0 =? i.++ && t3._0 =? i.++ && t4._0 =? i.++ && t5._0 =? i.++ && t6._0 =? i.++ && t7._0 =? i.++ &&
		t8._0 =? i.++ && t9._0 =? i.++ && t10._0 =? i.++ && t11._0 =? i.++ && t12._0 =? i.++ && t13._0 =? i.++ && t14._0 =? i.++ &&
		t15._0 =? i.++ && t16._0 =? i.++ && t17._0 =? i.++ && t18._0 =? i.++ && t19._0 =? i.++ && t20._0 =? i.++ && t21._0 =? i.++ &&
		t22._0 =? i.++ && t23._0 =? i.++ && t24._0 =? i.++ && t25._0 =? i.++ && tuptup._0 =? 1
	}


	property("*:._1") = {
		val i = new Count(-1)
		t2._1 =? i.++ && t3._1 =? i.++ && t4._1 =? i.++ && t5._1 =? i.++ && t6._1 =? i.++ && t7._1 =? i.++ &&
		t8._1 =? i.++ && t9._1 =? i.++ && t10._1 =? i.++ && t11._1 =? i.++ && t12._1 =? i.++ && t13._1 =? i.++ && t14._1 =? i.++ &&
		t15._1 =? i.++ && t16._1 =? i.++ && t17._1 =? i.++ && t18._1 =? i.++ && t19._1 =? i.++ && t20._1 =? i.++ && t21._1 =? i.++ &&
		t22._1 =? i.++ && t23._1 =? i.++ && t24._1 =? i.++ && t25._1 =? i.++ && tuptup._1 =? "2"
	}

	property("*:._2") = {
		val i = new Count(-1)
		t3._2 =? i.++ && t4._2 =? i.++ && t5._2 =? i.++ && t6._2 =? i.++ && t7._2 =? i.++ &&
		t8._2 =? i.++ && t9._2 =? i.++ && t10._2 =? i.++ && t11._2 =? i.++ && t12._2 =? i.++ && t13._2 =? i.++ && t14._2 =? i.++ &&
		t15._2 =? i.++ && t16._2 =? i.++ && t17._2 =? i.++ && t18._2 =? i.++ && t19._2 =? i.++ && t20._2 =? i.++ && t21._2 =? i.++ &&
		t22._2 =? i.++ && t23._2 =? i.++ && t24._2 =? i.++ && t25._2 =? i.++ && tuptup._2 =? 3L
	}

	property("*:._3") = {
		val i = new Count(-1)
		t4._3 =? i.++ && t5._3 =? i.++ && t6._3 =? i.++ && t7._3 =? i.++ &&
		t8._3 =? i.++ && t9._3 =? i.++ && t10._3 =? i.++ && t11._3 =? i.++ && t12._3 =? i.++ && t13._3 =? i.++ && t14._3 =? i.++ &&
		t15._3 =? i.++ && t16._3 =? i.++ && t17._3 =? i.++ && t18._3 =? i.++ && t19._3 =? i.++ && t20._3 =? i.++ && t21._3 =? i.++ &&
		t22._3 =? i.++ && t23._3 =? i.++ && t24._3 =? i.++ && t25._3 =? i.++ && tuptup._3 =? '4'
	}

	property("*:._4") = {
		val i = new Count(-1)
		t5._4 =? i.++ && t6._4 =? i.++ && t7._4 =? i.++ &&
		t8._4 =? i.++ && t9._4 =? i.++ && t10._4 =? i.++ && t11._4 =? i.++ && t12._4 =? i.++ && t13._4 =? i.++ && t14._4 =? i.++ &&
		t15._4 =? i.++ && t16._4 =? i.++ && t17._4 =? i.++ && t18._4 =? i.++ && t19._4 =? i.++ && t20._4 =? i.++ && t21._4 =? i.++ &&
		t22._4 =? i.++ && t23._4 =? i.++ && t24._4 =? i.++ && t25._4 =? i.++
	}

	property("*:._5") = {
		val i = new Count(-1)
		t6._5 =? i.++ && t7._5 =? i.++ &&
		t8._5 =? i.++ && t9._5 =? i.++ && t10._5 =? i.++ && t11._5 =? i.++ && t12._5 =? i.++ && t13._5 =? i.++ && t14._5 =? i.++ &&
		t15._5 =? i.++ && t16._5 =? i.++ && t17._5 =? i.++ && t18._5 =? i.++ && t19._5 =? i.++ && t20._5 =? i.++ && t21._5 =? i.++ &&
		t22._5 =? i.++ && t23._5 =? i.++ && t24._5 =? i.++ && t25._5 =? i.++
	}


	property("*:._6") = {
		val i = new Count(-1)
		t7._6 =? i.++ &&
		t8._6 =? i.++ && t9._6 =? i.++ && t10._6 =? i.++ && t11._6 =? i.++ && t12._6 =? i.++ && t13._6 =? i.++ && t14._6 =? i.++ &&
		t15._6 =? i.++ && t16._6 =? i.++ && t17._6 =? i.++ && t18._6 =? i.++ && t19._6 =? i.++ && t20._6 =? i.++ && t21._6 =? i.++ &&
		t22._6 =? i.++ && t23._6 =? i.++ && t24._6 =? i.++ && t25._6 =? i.++
	}

	property("*:._7") = {
		val i = new Count(-1)
		t8._7 =? i.++ && t9._7 =? i.++ && t10._7 =? i.++ && t11._7 =? i.++ && t12._7 =? i.++ && t13._7 =? i.++ && t14._7 =? i.++ &&
		t15._7 =? i.++ && t16._7 =? i.++ && t17._7 =? i.++ && t18._7 =? i.++ && t19._7 =? i.++ && t20._7 =? i.++ && t21._7 =? i.++ &&
		t22._7 =? i.++ && t23._7 =? i.++ && t24._7 =? i.++ && t25._7 =? i.++
	}

	property("*:._8") = {
		val i = new Count(-1)
		t9._8 =? i.++ && t10._8 =? i.++ && t11._8 =? i.++ && t12._8 =? i.++ && t13._8 =? i.++ && t14._8 =? i.++ &&
		t15._8 =? i.++ && t16._8 =? i.++ && t17._8 =? i.++ && t18._8 =? i.++ && t19._8 =? i.++ && t20._8 =? i.++ && t21._8 =? i.++ &&
		t22._8 =? i.++ && t23._8 =? i.++ && t24._8 =? i.++ && t25._8 =? i.++
	}

	property("*:._9") = {
		val i = new Count(-1)
		t10._9 =? i.++ && t11._9 =? i.++ && t12._9 =? i.++ && t13._9 =? i.++ && t14._9 =? i.++ &&
		t15._9 =? i.++ && t16._9 =? i.++ && t17._9 =? i.++ && t18._9 =? i.++ && t19._9 =? i.++ && t20._9 =? i.++ && t21._9 =? i.++ &&
		t22._9 =? i.++ && t23._9 =? i.++ && t24._9 =? i.++ && t25._9 =? i.++
	}

	property("*:._10") = {
		val i = new Count(-1)
		t11._10 =? i.++ && t12._10 =? i.++ && t13._10 =? i.++ && t14._10 =? i.++ &&
		t15._10 =? i.++ && t16._10 =? i.++ && t17._10 =? i.++ && t18._10 =? i.++ && t19._10 =? i.++ && t20._10 =? i.++ && t21._10 =? i.++ &&
		t22._10 =? i.++ && t23._10 =? i.++ && t24._10 =? i.++ && t25._10 =? i.++
	}

	property("*:._11") = {
		val i = new Count(-1)
		t12._11 =? i.++ && t13._11 =? i.++ && t14._11 =? i.++ &&
		t15._11 =? i.++ && t16._11 =? i.++ && t17._11 =? i.++ && t18._11 =? i.++ && t19._11 =? i.++ && t20._11 =? i.++ && t21._11 =? i.++ &&
		t22._11 =? i.++ && t23._11 =? i.++ && t24._11 =? i.++ && t25._11 =? i.++
	}

	property("*:._12") = {
		val i = new Count(-1)
		t13._12 =? i.++ && t14._12 =? i.++ &&
		t15._12 =? i.++ && t16._12 =? i.++ && t17._12 =? i.++ && t18._12 =? i.++ && t19._12 =? i.++ && t20._12 =? i.++ && t21._12 =? i.++ &&
		t22._12 =? i.++ && t23._12 =? i.++ && t24._12 =? i.++ && t25._12 =? i.++
	}

	property("*:._13") = {
		val i = new Count(-1)
		t14._13 =? i.++ &&
		t15._13 =? i.++ && t16._13 =? i.++ && t17._13 =? i.++ && t18._13 =? i.++ && t19._13 =? i.++ && t20._13 =? i.++ && t21._13 =? i.++ &&
		t22._13 =? i.++ && t23._13 =? i.++ && t24._13 =? i.++ && t25._13 =? i.++
	}

	property("*:._14") = {
		val i = new Count(-1)
		t15._14 =? i.++ && t16._14 =? i.++ && t17._14 =? i.++ && t18._14 =? i.++ && t19._14 =? i.++ && t20._14 =? i.++ && t21._14 =? i.++ &&
		t22._14 =? i.++ && t23._14 =? i.++ && t24._14 =? i.++ && t25._14 =? i.++
	}

	property("*:._15") = {
		val i = new Count(-1)
		t16._15 =? i.++ && t17._15 =? i.++ && t18._15 =? i.++ && t19._15 =? i.++ && t20._15 =? i.++ && t21._15 =? i.++ &&
		t22._15 =? i.++ && t23._15 =? i.++ && t24._15 =? i.++ && t25._15 =? i.++
	}

	property("*:._16") = {
		val i = new Count(-1)
		t17._16 =? i.++ && t18._16 =? i.++ && t19._16 =? i.++ && t20._16 =? i.++ && t21._16 =? i.++ &&
		t22._16 =? i.++ && t23._16 =? i.++ && t24._16 =? i.++ && t25._16 =? i.++
	}

	property("*:._17") = {
		val i = new Count(-1)
		t18._17 =? i.++ && t19._17 =? i.++ && t20._17 =? i.++ && t21._17 =? i.++ &&
		t22._17 =? i.++ && t23._17 =? i.++ && t24._17 =? i.++ && t25._17 =? i.++
	}

	property("*:._18") = {
		val i = new Count(-1)
		t19._18 =? i.++ && t20._18 =? i.++ && t21._18 =? i.++ &&
		t22._18 =? i.++ && t23._18 =? i.++ && t24._18 =? i.++ && t25._18 =? i.++
	}

	property("*:._19") = {
		val i = new Count(-1)
		t20._19 =? i.++ && t21._19 =? i.++ &&
		t22._19 =? i.++ && t23._19 =? i.++ && t24._19 =? i.++ && t25._19 =? i.++
	}

	property("*:._20") = {
		val i = new Count(-1)
		t21._20 =? i.++ &&
		t22._20 =? i.++ && t23._20 =? i.++ && t24._20 =? i.++ && t25._20 =? i.++
	}

	property("*:._21") = {
		val i = new Count(-1)
		t22._21 =? i.++ && t23._21 =? i.++ && t24._21 =? i.++ && t25._21 =? i.++
	}

	property("*:._22") = {
		val i = new Count(-1)
		t23._22 =? i.++ && t24._22 =? i.++ && t25._22 =? i.++
	}




	property("*:.head") = {
		val i = new Count(-1)
		t1.head =? i.++ && t2.head =? i.++ && t3.head =? i.++ && t4.head =? i.++ && t5.head =? i.++ && t6.head =? i.++ && t7.head =? i.++ &&
		t8.head =? i.++ && t9.head =? i.++ && t10.head =? i.++ && t11.head =? i.++ && t12.head =? i.++ && t13.head =? i.++ && t14.head =? i.++ &&
		t15.head =? i.++ && t16.head =? i.++ && t17.head =? i.++ && t18.head =? i.++ && t19.head =? i.++ && t20.head =? i.++ && t21.head =? i.++ &&
		t22.head =? i.++ && t23.head =? i.++ && t24.head =? i.++ && t25.head =? i.++ && tuptup.head =? 1
	}

	property("*:.tail") = tuptup.tail =? "2" *: 3L *: '4' *: <*> &&
		t1.tail =? <*> && t2.tail =? t1 && t3.tail =? t2 && t4.tail =? t3 && t5.tail =? t4 && t6.tail =? t5 && t7.tail =? t6 &&
		t8.tail =? t7 && t9.tail =? t8 && t10.tail =? t9 && t11.tail =? t10 && t12.tail =? t11 && t13.tail =? t12 &&
		t14.tail =? t13 && t15.tail =? t14 && t16.tail =? t15 && t17.tail =? t16 && t18.tail =? t17 && t19.tail =? t18 &&
		t20.tail =? t19 && t21.tail =? t20 && t22.tail =? t21 && t23.tail =? t22 && t24.tail =? t23 && t25.tail =? t24



	property("*:.drop") = {
		import Nat._
		t20.drop(_0) =? t20 && t20.drop(_1) =? t19 && t20.drop(_2) =? t18 && t20.drop(_3) =? t17 && t20.drop(_4) =? t16 &&
		t20.drop(_5) =? t15 && t20.drop(_6) =? t14 && t20.drop(_7) =? t13 && t20.drop(_8) =? t12 && t20.drop(_9) =? t11 &&
		t20.drop(_10) =? t10 && t20.drop(_11) =? t9 && t20.drop(_12) =? t8 && t20.drop(_13) =? t7 && t20.drop(_14) =? t6 &&
		t20.drop(_15) =? t5 && t20.drop(_16) =? t4 && t20.drop(_17) =? t3 && t20.drop(_18) =? t2 && t20.drop(_19) =? t1 &&
		t20.drop(_20) =? t0 &&
		tuptup.drop(_0) =? (1 *: "2" *: 3L *: '4') && tuptup.drop(_1) =? ("2" *: 3L *: '4') &&
		tuptup.drop(_2) =? (3L *: '4') && tuptup.drop(_3) =? Tuple('4') && tuptup.drop(_4) =? <*>
	}

	property("*:.take") = {
		import Nat._
		val t = t21; val T = Tuple
		t.take(_0) =? T() && t.take(_1) =? T(20) && t.take(_2) =? T(20, 19) && t.take(_3) =? T(20, 19, 18) &&
		t.take(_4) =? T(20, 19, 18, 17) && t.take(_5) =? T(20, 19, 18, 17, 16) && t.take(_6) =? T(20, 19, 18, 17, 16, 15) &&
		t.take(_7) =? T(20, 19, 18, 17, 16, 15, 14) && t.take(_8) =? T(20, 19, 18, 17, 16, 15, 14, 13) &&
		t.take(_9) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12) && t.take(_10) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11) &&
		t.take(_11) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10) && t.take(_12) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9) &&
		t.take(_13) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8) &&
		t.take(_14) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7) &&
		t.take(_15) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6) &&
		t.take(_16) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5) &&
		t.take(_17) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4) &&
		t.take(_18) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3) &&
		t.take(_19) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2) &&
		t.take(_20) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1) &&
		t.take(_21) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) &&
		tuptup.take(_0) =? <*> && tuptup.take(_1) =? Tuple(1) && tuptup.take(_2) =? (1 *: "2") &&
		tuptup.take(_3) =? (1 *: "2" *: 3L) && tuptup.take(_4) =? (1 *: "2" *: 3L *: '4')
	}

	property("*:.dropRight") = {
		import Nat._
		val t = t21; val T = Tuple
		t.dropRight(_21) =? T() && t.dropRight(_20) =? T(20) && t.dropRight(_19) =? T(20, 19) && t.dropRight(_18) =? T(20, 19, 18) &&
		t.dropRight(_17) =? T(20, 19, 18, 17) && t.dropRight(_16) =? T(20, 19, 18, 17, 16) && t.dropRight(_15) =? T(20, 19, 18, 17, 16, 15) &&
		t.dropRight(_14) =? T(20, 19, 18, 17, 16, 15, 14) && t.dropRight(_13) =? T(20, 19, 18, 17, 16, 15, 14, 13) &&
		t.dropRight(_12) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12) && t.dropRight(_11) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11) &&
		t.dropRight(_10) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10) && t.dropRight(_9) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9) &&
		t.dropRight(_8) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8) &&
		t.dropRight(_7) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7) &&
		t.dropRight(_6) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6) &&
		t.dropRight(_5) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5) &&
		t.dropRight(_4) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4) &&
		t.dropRight(_3) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3) &&
		t.dropRight(_2) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2) &&
		t.dropRight(_1) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1) &&
		t.dropRight(_0) =? T(20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0) &&
		tuptup.dropRight(_4) =? <*> && tuptup.dropRight(_3) =? Tuple(1) && tuptup.dropRight(_2) =? (1 *: "2") &&
		tuptup.dropRight(_1) =? (1 *: "2" *: 3L) && tuptup.dropRight(_0) =? (1 *: "2" *: 3L *: '4')

	}

	property("*:.takeRight") = {
		import Nat._
		val t = t21; val T = Tuple
		t20.takeRight(_20) =? t20 && t20.takeRight(_19) =? t19 && t20.takeRight(_18) =? t18 && t20.takeRight(_17) =? t17 &&
		t20.takeRight(_16) =? t16 && t20.takeRight(_15) =? t15 && t20.takeRight(_14) =? t14 && t20.takeRight(_13) =? t13 &&
		t20.takeRight(_12) =? t12 && t20.takeRight(_11) =? t11 && t20.takeRight(_10) =? t10 && t20.takeRight(_9) =? t9 &&
		t20.takeRight(_8) =? t8 && t20.takeRight(_7) =? t7 && t20.takeRight(_6) =? t6 && t20.takeRight(_5) =? t5 &&
		t20.takeRight(_4) =? t4 && t20.takeRight(_3) =? t3 && t20.takeRight(_2) =? t2 && t20.takeRight(_1) =? t1 &&
		t20.takeRight(_0) =? t0 &&
		tuptup.takeRight(_4) =? (1 *: "2" *: 3L *: '4') && tuptup.takeRight(_3) =? ("2" *: 3L *: '4') &&
		tuptup.takeRight(_2) =? (3L *: '4') && tuptup.takeRight(_1) =? Tuple('4') && tuptup.takeRight(_0) =? <*>
	}

	property("*:.slice") = {
		import Nat._
		t20.slice(_9, _12) =? Tuple(10, 9, 8) && tuptup.slice(_1, _2) =? Tuple("2") && tuptup.slice(_1, _3) =? Tuple("2", 3L) &&
		tuptup.slice(_1, _4) =? Tuple("2", 3L, '4') && tuptup.slice(_0, _2) =? Tuple(1, "2") &&
		tuptup.slice(_2, _3) =? Tuple(3L) && tuptup.slice(_2, _4) =? Tuple(3L, '4')
	}



	property("*:.length") = {
		val lengths = 0 to 25
		all(Seq(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25)
			.zip(lengths).map { case (t, len) => t.length =? len } : _*
		)
	}

	property("*:.toSeq") = {
		val lengths = 0 to 25
		val tuples = Seq(
            t0.toSeq, t1.toSeq, t2.toSeq, t3.toSeq, t4.toSeq, t5.toSeq, t6.toSeq, t7.toSeq, t8.toSeq, t9.toSeq, t10.toSeq,
            t11.toSeq, t12.toSeq, t13.toSeq, t14.toSeq, t15.toSeq, t16.toSeq, t17.toSeq, t18.toSeq, t19.toSeq, t20.toSeq,
            t21.toSeq, t22.toSeq, t23.toSeq, t24.toSeq, t25.toSeq
        )
		all(tuples.zip(lengths) map { case (t, len) => t =? lengths.take(len).reverse } :_*)
	}












}